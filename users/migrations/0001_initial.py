# Generated by Django 5.2.5 on 2025-08-16 17:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Hakkında')),
                ('avatar', models.ImageField(default='avatars/default.png', upload_to='avatars/', verbose_name='Profil Fotoğrafı')),
                ('gender', models.CharField(blank=True, choices=[('female', 'Kadın'), ('male', 'Erkek')], db_index=True, max_length=10, verbose_name='Cinsiyet')),
                ('birth_date', models.DateField(blank=True, db_index=True, null=True, verbose_name='Doğum Tarihi')),
                ('birth_time', models.TimeField(blank=True, null=True, verbose_name='Doğum Saati')),
                ('birth_city', models.CharField(blank=True, max_length=100, verbose_name='Doğum Şehri')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Enlem')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Boylam')),
                ('sun_sign', models.CharField(blank=True, choices=[('Aries', 'Koç'), ('Taurus', 'Boğa'), ('Gemini', 'İkizler'), ('Cancer', 'Yengeç'), ('Leo', 'Aslan'), ('Virgo', 'Başak'), ('Libra', 'Terazi'), ('Scorpio', 'Akrep'), ('Sagittarius', 'Yay'), ('Capricorn', 'Oğlak'), ('Aquarius', 'Kova'), ('Pisces', 'Balık')], db_index=True, max_length=20, verbose_name='Güneş Burcu')),
                ('moon_sign', models.CharField(blank=True, choices=[('Aries', 'Koç'), ('Taurus', 'Boğa'), ('Gemini', 'İkizler'), ('Cancer', 'Yengeç'), ('Leo', 'Aslan'), ('Virgo', 'Başak'), ('Libra', 'Terazi'), ('Scorpio', 'Akrep'), ('Sagittarius', 'Yay'), ('Capricorn', 'Oğlak'), ('Aquarius', 'Kova'), ('Pisces', 'Balık')], max_length=20, verbose_name='Ay Burcu')),
                ('rising_sign', models.CharField(blank=True, choices=[('Aries', 'Koç'), ('Taurus', 'Boğa'), ('Gemini', 'İkizler'), ('Cancer', 'Yengeç'), ('Leo', 'Aslan'), ('Virgo', 'Başak'), ('Libra', 'Terazi'), ('Scorpio', 'Akrep'), ('Sagittarius', 'Yay'), ('Capricorn', 'Oğlak'), ('Aquarius', 'Kova'), ('Pisces', 'Balık')], max_length=20, verbose_name='Yükselen Burç')),
                ('mercury_sign', models.CharField(blank=True, choices=[('Aries', 'Koç'), ('Taurus', 'Boğa'), ('Gemini', 'İkizler'), ('Cancer', 'Yengeç'), ('Leo', 'Aslan'), ('Virgo', 'Başak'), ('Libra', 'Terazi'), ('Scorpio', 'Akrep'), ('Sagittarius', 'Yay'), ('Capricorn', 'Oğlak'), ('Aquarius', 'Kova'), ('Pisces', 'Balık')], max_length=20, verbose_name='Merkür Burcu')),
                ('venus_sign', models.CharField(blank=True, choices=[('Aries', 'Koç'), ('Taurus', 'Boğa'), ('Gemini', 'İkizler'), ('Cancer', 'Yengeç'), ('Leo', 'Aslan'), ('Virgo', 'Başak'), ('Libra', 'Terazi'), ('Scorpio', 'Akrep'), ('Sagittarius', 'Yay'), ('Capricorn', 'Oğlak'), ('Aquarius', 'Kova'), ('Pisces', 'Balık')], max_length=20, verbose_name='Venüs Burcu')),
                ('mars_sign', models.CharField(blank=True, choices=[('Aries', 'Koç'), ('Taurus', 'Boğa'), ('Gemini', 'İkizler'), ('Cancer', 'Yengeç'), ('Leo', 'Aslan'), ('Virgo', 'Başak'), ('Libra', 'Terazi'), ('Scorpio', 'Akrep'), ('Sagittarius', 'Yay'), ('Capricorn', 'Oğlak'), ('Aquarius', 'Kova'), ('Pisces', 'Balık')], max_length=20, verbose_name='Mars Burcu')),
                ('natal_chart_png_base64', models.TextField(blank=True, verbose_name='Doğum Haritası (Base64)')),
                ('insights_data', models.JSONField(blank=True, null=True, verbose_name='Astrolojik Analiz Verileri')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Kullanıcı')),
            ],
            options={
                'verbose_name': 'Profil',
                'verbose_name_plural': 'Profiller',
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fcm_token', models.TextField(verbose_name='Firebase Cloud Messaging Token')),
                ('device_type', models.CharField(choices=[('android', 'Android'), ('ios', 'iOS')], default='android', max_length=10, verbose_name='Cihaz Tipi')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif mi?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to=settings.AUTH_USER_MODEL, verbose_name='Kullanıcı')),
            ],
            options={
                'verbose_name': 'Cihaz',
                'verbose_name_plural': 'Cihazlar',
                'ordering': ['-updated_at'],
                'unique_together': {('user', 'fcm_token')},
            },
        ),
    ]
